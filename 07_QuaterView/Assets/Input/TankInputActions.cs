//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/TankInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TankInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TankInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TankInputActions"",
    ""maps"": [
        {
            ""name"": ""Tank"",
            ""id"": ""fc34b727-5437-4fab-a9fb-24e9deb74d02"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c33582b8-69f9-4d99-99fb-0fef33acacac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""cb01e2d1-ccbf-4c8a-b505-9b4e67e827b3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NormalFire"",
                    ""type"": ""Button"",
                    ""id"": ""46b28ce7-5d96-42d8-ba8a-c9b8da2886e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialFire"",
                    ""type"": ""Button"",
                    ""id"": ""fe37abb3-5abc-4c06-a91a-1eb3ce1f32d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShortCut1"",
                    ""type"": ""Button"",
                    ""id"": ""1baf0c5b-36f7-4301-bec0-3014fc179a87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShortCut2"",
                    ""type"": ""Button"",
                    ""id"": ""aea834bd-b5bb-439b-b6f8-41fda3710a9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill_Barrier"",
                    ""type"": ""Button"",
                    ""id"": ""c52f70ee-db9a-4ead-9cc1-3ff8346bcfd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""40147ae3-662d-4407-8356-2e1215d6fd33"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2e523f76-cfb1-4152-b69f-7c4cc8095732"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8b9cdcfa-a0c0-40f9-aa2a-c00a17d3dd89"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c3fc933b-c1ac-4ba8-84a9-40a651867ba7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""07e90e85-ae67-4ccd-9348-a9a8b42ecd95"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f3e083fc-6257-47bb-acff-d5fff22fe441"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d003106-06ef-4b29-9e2b-da918b55f87a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""NormalFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""246a30c9-33cd-42d8-a877-ff2754f24c0c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""SpecialFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76cf9832-7984-42f0-a095-61a4df3ce356"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""ShortCut1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4fec246-13f9-4905-93d6-fae79aa69777"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""ShortCut2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1128424-40b4-4fa2-b3b7-4191605dc0d4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Skill_Barrier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""K&M"",
            ""bindingGroup"": ""K&M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Tank
        m_Tank = asset.FindActionMap("Tank", throwIfNotFound: true);
        m_Tank_Move = m_Tank.FindAction("Move", throwIfNotFound: true);
        m_Tank_Look = m_Tank.FindAction("Look", throwIfNotFound: true);
        m_Tank_NormalFire = m_Tank.FindAction("NormalFire", throwIfNotFound: true);
        m_Tank_SpecialFire = m_Tank.FindAction("SpecialFire", throwIfNotFound: true);
        m_Tank_ShortCut1 = m_Tank.FindAction("ShortCut1", throwIfNotFound: true);
        m_Tank_ShortCut2 = m_Tank.FindAction("ShortCut2", throwIfNotFound: true);
        m_Tank_Skill_Barrier = m_Tank.FindAction("Skill_Barrier", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tank
    private readonly InputActionMap m_Tank;
    private ITankActions m_TankActionsCallbackInterface;
    private readonly InputAction m_Tank_Move;
    private readonly InputAction m_Tank_Look;
    private readonly InputAction m_Tank_NormalFire;
    private readonly InputAction m_Tank_SpecialFire;
    private readonly InputAction m_Tank_ShortCut1;
    private readonly InputAction m_Tank_ShortCut2;
    private readonly InputAction m_Tank_Skill_Barrier;
    public struct TankActions
    {
        private @TankInputActions m_Wrapper;
        public TankActions(@TankInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Tank_Move;
        public InputAction @Look => m_Wrapper.m_Tank_Look;
        public InputAction @NormalFire => m_Wrapper.m_Tank_NormalFire;
        public InputAction @SpecialFire => m_Wrapper.m_Tank_SpecialFire;
        public InputAction @ShortCut1 => m_Wrapper.m_Tank_ShortCut1;
        public InputAction @ShortCut2 => m_Wrapper.m_Tank_ShortCut2;
        public InputAction @Skill_Barrier => m_Wrapper.m_Tank_Skill_Barrier;
        public InputActionMap Get() { return m_Wrapper.m_Tank; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankActions set) { return set.Get(); }
        public void SetCallbacks(ITankActions instance)
        {
            if (m_Wrapper.m_TankActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_TankActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_TankActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnLook;
                @NormalFire.started -= m_Wrapper.m_TankActionsCallbackInterface.OnNormalFire;
                @NormalFire.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnNormalFire;
                @NormalFire.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnNormalFire;
                @SpecialFire.started -= m_Wrapper.m_TankActionsCallbackInterface.OnSpecialFire;
                @SpecialFire.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnSpecialFire;
                @SpecialFire.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnSpecialFire;
                @ShortCut1.started -= m_Wrapper.m_TankActionsCallbackInterface.OnShortCut1;
                @ShortCut1.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnShortCut1;
                @ShortCut1.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnShortCut1;
                @ShortCut2.started -= m_Wrapper.m_TankActionsCallbackInterface.OnShortCut2;
                @ShortCut2.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnShortCut2;
                @ShortCut2.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnShortCut2;
                @Skill_Barrier.started -= m_Wrapper.m_TankActionsCallbackInterface.OnSkill_Barrier;
                @Skill_Barrier.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnSkill_Barrier;
                @Skill_Barrier.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnSkill_Barrier;
            }
            m_Wrapper.m_TankActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @NormalFire.started += instance.OnNormalFire;
                @NormalFire.performed += instance.OnNormalFire;
                @NormalFire.canceled += instance.OnNormalFire;
                @SpecialFire.started += instance.OnSpecialFire;
                @SpecialFire.performed += instance.OnSpecialFire;
                @SpecialFire.canceled += instance.OnSpecialFire;
                @ShortCut1.started += instance.OnShortCut1;
                @ShortCut1.performed += instance.OnShortCut1;
                @ShortCut1.canceled += instance.OnShortCut1;
                @ShortCut2.started += instance.OnShortCut2;
                @ShortCut2.performed += instance.OnShortCut2;
                @ShortCut2.canceled += instance.OnShortCut2;
                @Skill_Barrier.started += instance.OnSkill_Barrier;
                @Skill_Barrier.performed += instance.OnSkill_Barrier;
                @Skill_Barrier.canceled += instance.OnSkill_Barrier;
            }
        }
    }
    public TankActions @Tank => new TankActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("K&M");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    public interface ITankActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnNormalFire(InputAction.CallbackContext context);
        void OnSpecialFire(InputAction.CallbackContext context);
        void OnShortCut1(InputAction.CallbackContext context);
        void OnShortCut2(InputAction.CallbackContext context);
        void OnSkill_Barrier(InputAction.CallbackContext context);
    }
}
